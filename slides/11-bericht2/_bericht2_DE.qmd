---
title: "TOPIC"
subtitle: "Dynamische und reproduzierbare Berichte mit R"
author: "Daniela Palleschi"
institute: Humboldt-Universität zu Berlin
footer: "Woche X - TOPIC" 
lang: de
date: "`r Sys.Date()`"
format:
  html:
    output-file: bericht2_DE.html
    number-sections: true
    number-depth: 3
    toc: true
    code-overflow: wrap
    # code-tools: true
    self-contained: true
    execute:
      fig-height: 3.7
  pdf:
    output-file: bericht2_DE.pdf
    toc: true
    papersize: a4paper
    number-sections: true
    colorlinks: true
    code-overflow: wrap
    execute:
      out-height: "43.26%"
bibliography: references.bib
editor_options: 
  chunk_output_type: console
---

```{r, eval=TRUE, echo = FALSE}
# set this to TRUE if you want to provide the results/answers; then also add 'code-tools: true' to the YAML
# set this to FALSE if this is the version to be sent describing the assignment

options(scipen=999)

# ANSWERS_MODE <- "instructions" # instructions only
# ANSWERS_MODE <- "output" # output only but not the code
# ANSWERS_MODE <- "answers" # code and output
```

```{r, eval = if (ANSWERS_MODE == 'instructions') TRUE else FALSE, echo = FALSE}

knitr::opts_chunk$set(eval = T, # evaluate chunks
                      echo = F, # 'print code chunk?'
                      message = F, # 'print messages (e.g., warnings)?'
                      error = F, # stop when error encountered
                      warning = F) # don't print warnings
```

```{r, eval = if (ANSWERS_MODE == 'output') TRUE else FALSE, echo = FALSE}
knitr::opts_chunk$set(eval = T, # evaluate chunks
                      echo = F, # 'print code chunk?'
                      message = F, # 'print messages (e.g., warnings)?'
                      error = F, # stop when error encountered
                      warning = F) # don't print warnings
```

```{r, eval = if (ANSWERS_MODE == 'answers') TRUE else FALSE, echo= if (ANSWERS_MODE == 'answers') TRUE else FALSE}
knitr::opts_chunk$set(eval = T, # evaluate chunks
                      echo = T, # 'print code chunk?'
                      message = F, # 'print messages (e.g., warnings)?'
                      error = F, # stop when error encountered
                      warning = F) # don't print warnings
```

```{r, eval = T, cache = F}
#| echo: false
#| results: hide
# Create references.json file based on the citations in this script
# make sure you have 'bibliography: references.json' in the YAML
# rbbt::bbt_update_bib("_bericht2_DE.qmd")
```

# Aufgabenübersicht {.unnumbered}

Für diesen Bericht werden Sie Diagramme interpretieren, Daten einlesen und verarbeiten und 2 Tabellen und 2 Diagramme erstellen.

# Beabsichtigte Lernergebnisse {.unnumbered}

- Das beabsichtigte Ziel dieses Berichts ist es, dass Sie nachweisen:

### Kenntnisse und Fähigkeiten {.unnumbered}

- die Fähigkeit, zusammenfassende Statistiken zu berechnen
- die Fähigkeit, Tabellen mit zusammenfassenden Statistiken und Datenverteilungen zu erstellen

### Kommunikation {.unnumbered}

- die Fähigkeit, formatierte Tabellen mit zusammenfassenden Statistiken zu drucken
- die Fähigkeit, Unterschiede zwischen Datengruppen durch Bezugnahme auf zusammenfassende Statistiken und Diagramme zu beschreiben

# Bewertung {.unnumbered}

Die Bewertung erfolgt auf der Grundlage der Replikation der 

- die Struktur des Dokuments (die HTML-Ausgabe)
- die Struktur und Genauigkeit des Codes (`.qmd`-Quellcode)
- die Ähnlichkeit zwischen den Originalplots und Ihren Plots

## Tipps {.unnumbered}

Einige Tipps:

- Sie können auf Deutsch oder Englisch schreiben, je nachdem, was Sie bevorzugen
- Ich empfehle Ihnen dringend, Ihr Dokument *oft* zu rendern! Auf diese Weise können Sie, wenn ein Problem auftaucht, besser einschätzen, welcher Code es verursacht.
- Wenn Sie das Gefühl haben, dass Sie etwas langsam sind, versuchen Sie, sich auf das "große Ganze" zu konzentrieren und machen Sie sich keine Gedanken über all die Details in den Plots
  + Versuchen Sie zunächst, den Plot im Allgemeinen zu erstellen, und gehen Sie dann zu den Details über
  + Ich persönlich würde zuerst versuchen, die Handlung im Großen und Ganzen zu entwerfen, und mich dann um die Details kümmern
  
*Tun Sie einfach Ihr Bestes!*

## @biondo_yesterday_2022: Verarbeitung der Kongruenz der Zeitformen der Verben {.unnumbered}

Wir werden uns wieder mit den Daten von @biondo_yesterday_2022 arbeiten. Sie müssen die Daten nicht vollständig verstehen, um die Aufgaben zu lösen, aber vielleicht finden Sie sie hilfreich. Ihre Hauptaufgabe besteht darin, vier Diagramme zur Untersuchung der Daten zu erstellen.

Unsere Daten stammen aus einem Eye-Tracking-Experiment von @biondo_yesterday_2022, bei dem:

  + Die Teilnehmer lasen (spanische) Sätze mit Zeitformeln aus der Vergangenheit oder Zukunft (z. B. *ayer* 'gestern' oder *mañana* 'morgen') und Verbformen aus der Vergangenheit oder Zukunft (z. B. *compraron* 'gekauft' oder *comprarán* 'wird kaufen'). In @fig-Biondo finden Sie Beispielsätze in der Vergangenheit und in der Zukunft unter grammatikalischen ("match") und ungrammatikalischen ("mismatch") Bedingungen.
  + Die Augenbewegungen wurden aufgezeichnet, während die Teilnehmer die Sätze lasen
  + Die Haupthypothese: Wenn die Temporalphrasen nicht mit der Verbform übereinstimmen (z.B. 'gestern...kaufen' oder 'morgen...kaufen'), sollten *längere* Lesemaßnahmen in der Verbregion beobachtet werden.
  + Eine weitere Frage: Wird dieser Effekt sowohl für die Vergangenheit als auch für die Zukunft beobachtet?

```{r}
#| label: fig-Biondo
#| fig-cap: "Beispielsätze aus @biondo_yesterday_2022"
#| echo: false
#| eval: true
#| out-width: "100%"
knitr::include_graphics(here::here("media","Biondo_2021_Table3.png"))
```

## Variablen {.unnumbered}

Unsere **Messvariablen** (d. h. abhängige Variablen) sind drei eye-tracking Messungen der Lesezeit:

  - Lesezeit beim ersten Durchgang (***first-pass reading time***: Summe aller Fixierungen auf einer Region von Interesse, bevor diese entweder nach links oder nach rechts verlassen wird)
  - Regressionspfaddauer (***regression path duration***: Summe des ersten Durchlaufs plus der Zeit, die für das erneute Lesen früherer Regionen aufgewendet wird, bevor die Region von Interesse passiert wird)
  - Gesamtlesedauer (***total reading time***: die Gesamtzeit, die beim Lesen des Satzes auf das Verb geschaut wird)

Unsere **Prädiktorvariablen** (d. h. unabhängige Variablen) sind:

  - die ***Temporaladverb Zeitbezug*** (Vergangenheit oder Zukunft)
  - die ***Verbform*** (*tense*) (Vergangenheit oder Zukunft)
  - die ***Satzregion*** (Adverb oder Verb)

## Vorhersagen {.unnumbered}

In der Regel gehen wir davon aus, dass längere Lesezeiten auf *Verarbeitungsschwierigkeiten*, d. h. Schwierigkeiten bei der Sprachverarbeitung, hinweisen. Die Hypothese war daher, dass längere Lesezeiten für die *Verb*-Region in ungrammatischen Sätzen vorhanden sein würden. Diese Frage werden wir heute mit den Daten nicht beantworten können.

# Einrichten

## YAML

- Erstellen Sie ein neues Quarto-Dokument
- Stellen Sie sicher, dass Ihre YAML enthält:
  + einen passenden Titel
  + Ihren Vor- und Nachnamen (`author`)
  + das Datum
  + das Inhaltsverzeichnis
  + unter `format: html`..., `self-contained: true` einfügen
    + und setzen Sie die globalen Chunk-Optionen auf `echo: false`
  
- Ihr YAML sollte etwa so aussehen

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false
---
title: "Summary assignment: wrangling and data viz"
subtitle: "In-class assignment 1"
author: "YOUR NAME HERE"
institute: Humboldt-Universität zu Berlin
lang: de
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    number-sections: true
    self-contained: true
    execute:
      echo: false
---
```


## Struktur des Dokuments

- Sie werden Ihr Quarto-Skript und die HTML-Ausgabe Ihres Skripts einreichen.
- Um die Lesbarkeit des gerenderten Dokuments zu verbessern, sollten Sie das Dokument durch Überschriften und Zwischenüberschriften strukturieren.
- Verwenden Sie schriftlichen Text, wo es notwendig ist, um Fragen zu beantworten/ Prozesse zu beschreiben
- Verwenden Sie bei Bedarf Code-Bausteine

- eine gute Strategie für die Wahl einer Überschrift: Wenn dieses Dokument einen neuen Abschnitt enthält, sollten Sie auch einen neuen Abschnitt erstellen

## Pakete

- werden Sie die Pakete benötigen:
  - `tidyverse`
  - `here`
  - `janitor`
  - `devtools`
  - `knitr`
  - `kableExtra`
  
Laden Sie sie mit dem Paket `pacman` (Funktion `p_load()`).
  
```{r}
#| echo: true
pacman::p_load(tidyverse,
               here,
               janitor,
               devtools,
               knitr,
               kableExtra)
```

```{r}
#| eval: true
pacman::p_load(tidyverse,
               here,
               ggthemes,
               patchwork,
               devtools,
               knitr,
               kableExtra)
```

## Datenbeschreibung

1. Laden Sie den Datensatz `Biondo_etal_2021_bericht2.csv` aus Moodle herunter, und speichern Sie ihn im Ordner `daten`.

2. Dann laden Sie die Daten und verwenden die Funktion `clean_names()` aus dem Paket `janitor`, um die Variablennamen zu bereinigen.

```{r}
#| eval: false
#| echo: false

# take total time from verb region to join with the response data (so scatterplots are possible)
df_et <- read_csv(here("daten", "Biondo.Soilemezidi.Mancini_dataset_ET.csv"),
                    locale = readr::locale(encoding = "latin1")) %>% 
  rename(subj = sj,
         Item.num = item,
         verb_tense = verb_t,
         adverb_time = adv_t,
         totalTime = tt,
         first.pass = fp,
         regression_path = gp,
         regress_in = ri,
         regressOut = ro
         ) %>% 
  filter(ROI %in% c("2","4")) %>% 
  rename(region = ROI) %>% 
  mutate(region = as_factor(region),
         region = fct_recode(region, "verb" = "4",
                             "adverb" = "2")) %>% 
  mutate(subj = as.numeric(subj)) %>% 
  select(subj,Item.num,label,totalTime, adverb_time, gramm, verb_tense, first.pass, regression_path, regress_in, regressOut, region)

write_csv(df_et, here("daten", "Biondo_etal_2021_bericht2.csv"))
```

Unsere Variablen sind in @tbl-vars beschrieben.

```{r}
#| echo: true
df_biondo <- read_csv(here("daten", "Biondo_etal_2021_bericht2.csv")) %>% 
  janitor::clean_names()
```

```{r}
#| eval: true
#| results: hide
#| echo: false


coldesc <- rep("", ncol(df_biondo))
names <- names(df_biondo)
class <-
  unlist(lapply(df_biondo, class),use.names = FALSE)

df_vars <-
cbind(names,class,coldesc, make.row.names=NULL) %>%
  # bind_cols(names,class,coldesc, .id=NULL) %>% 
  as_tibble() %>% 
  separate_rows(names, class, sep=",") 
  # format_csv()

print(data.frame(df_vars), quote = T, row.names = FALSE) 

(dd <- data.frame(x = 1:8, f = gl(2,4), ch = I(letters[1:8])))
     # print() with defaults
print(dd, quote = TRUE, row.names = FALSE)
     # suppresses row.names and quotes all entries

as_data_frame(df_vars, row.names=F)
print(df_vars, quote=T)
```


```{r}
#| echo: false
df_vars <- tribble(
  ~variable, ~type, ~description,
  "subj",  "numeric",     "Participant ID",
  "item_num",  "numeric",     "Item number",
  "label","character",     "sentence region text",
  "total_time",  "numeric",     "total reading time in milliseconds (eye-tracking: sum of all fixations made on a region of interest during the trial)",
  "adverb_time","character",     "adverb time reference: past/future",
  "gramm",  "numeric",     "grammaticality: whether the adverb time and verb tense matched (0: ungrammatical, 1: grammatical)",
  "verb_tense","character",     "verb tense: past/future",
  "first_pass",  "numeric",     "first-pass reading time in milliseconds (eye-tracking: sum of all fixations on a region of interest before leaving it either to the left or to the right",
  "regression_path",  "numeric",     "regression path duration/go-past time (eye-tracking: sum of the first-pass plus the time spent rereading previous regions before moving past the region of interest)",
  "regress_in",  "numeric",     "regression in; 0 = no, 1 = yes (eye-tracking: whether the region received a regression)",
  "regress_out",  "numeric",     "regression out; 0 = no, 1 = yes (eye-tracking: whether a regression out of the region was made)",
  "region","character",     "sentence region; here we only have adverb/verb",
)

```

```{r}
#| echo: false
#| eval: true
#| label: tbl-vars
#| tbl-cap: "Variable names and descriptions for dataset Biondo_etal_2021_bericht2.csv"

knitr::kable(df_vars,
             ) %>% 
  kableExtra::kable_styling()
```

# Data wrangling

1. Ordnen (d.h., `arrange()`) Sie die Daten nach Thema, Positionsnummer und Region, `und dann`,
2. Herausfiltern (d.h. `filter()`) von Beobachtungen, bei denen `adverb_time` `none` ist, `and then`,
2. Ordne die Variablen neu an (d.h. `relocate()`), so dass sie in der folgenden Reihenfolge stehen:
    - `subj`, `item_num`, `region`, `label`, `adverb_time`, `verb_tense`, `gramm`, `first_pass`, `regression_path`, `total_time`, `regress_in`, `regress_out`

```{r}
#| eval: true
df_biondo <- df_biondo %>% 
  filter(adverb_time != "none") %>% 
  arrange(subj, item_num, region) %>% 
  relocate(subj, item_num, region, label, adverb_time, verb_tense, gramm, first_pass, regression_path, total_time, regress_in, regress_out) 
```

2. Drucken Sie die ersten 10 Zeilen Ihres Datenrahmens mit den Funktionen `kable()` und `kable_styling()`. Dies sollte wie @tbl-wrangle aussehen.

```{r}
#| echo: true
#| label: tbl-wrangle
#| tbl-cap: "First 10 rows of df_biondo after data wrangling"
df_biondo %>% 
  head(n = 10) %>% 
  kable() %>% 
  kable_styling()
```


## Data tidying

1. Erstellen Sie eine längere Version des Datensatzes, so dass die Namen der Spalten `first_pass`, `regression_path` und `total_time` in einer neuen Variablen `measure` und ihre Werte in einer neuen Variablen `time` gespeichert werden. Sie müssen die Funktion `pivot_longer()` verwenden.

```{r}
#| eval: true
df_biondo_long <- 
  df_biondo %>% 
  pivot_longer(
    cols = c(first_pass, regression_path, total_time),
    names_to = "measure",
    values_to = "time"
  ) %>% 
  relocate(measure, time, .after=gramm)
```

2. Drucken Sie die ersten zehn Zeilen des neuen Datenrahmens mit den Funktionen `kable()` und `kable_styling()`. Es sollte wie @tbl-longer aussehen.

```{r}
#| echo: true
#| label: tbl-longer
#| tbl-cap: "First 10 rows of df_biondo_longer"

df_biondo_long %>% 
  head(n = 10) %>% 
  kable() %>% 
  kable_styling()
```

# Plot-Interpretation

In diesem Abschnitt werden Sie verschiedene Arten von Diagrammen interpretieren. Tipp: Lesen Sie immer zuerst den Titel und/oder die Beschriftung einer Tabelle und sehen Sie sich an, was die y- und x-Achse darstellen, sowie alle anderen ästhetischen Merkmale (z. B. die Farbe).

## Distributions

1. Vergleichen Sie den Code für `fig_1`, `fig_2` und `fig_3` mit der Ausgabe von @fig-histograms. Welcher Code ergibt A, B, und C? Wie konnen Sie das erkennen?

```{r}
#| echo: true
#| eval: true
fig_1 <- 
  df_biondo_long %>% 
  ggplot(aes(x = time, fill = verb_tense, colour = verb_tense)) +
  labs(colour = "Tense",
       fill = "Tense") +
  facet_wrap(~region) +
  geom_histogram(alpha = .2)  +
  theme_bw()
```

```{r}
#| echo: true
#| eval: true
fig_2 <- 
  df_biondo_long %>%  
  ggplot(aes(x = time, fill = verb_tense, colour = verb_tense)) +
  labs(x = "Time (ms)",
       y = "Number of observations") +
  facet_wrap(~measure) +
  geom_histogram(alpha = .2) +
  theme_bw()
```

```{r}
#| echo: true
#| eval: true
fig_3 <-
  df_biondo_long %>%  
  ggplot(aes(x = time, y = adverb_time, fill = verb_tense, colour = verb_tense)) +
  labs(x = "Time (ms)",
       y = "Adverb time reference") +
  facet_wrap(~measure) +
  geom_boxplot(alpha = .2) +
  theme_bw()
```


```{r}
#| label: fig-histograms
#| fig-cap: "Histogram 1 and Histogram 2"
#| eval: true
#| fig-width: 8
#| fig-asp: 1

library(patchwork)
(fig_3 / 
  fig_1 /
    fig_2) +
  plot_annotation(tag_levels = "A")
```

2. Welche Darstellung(en) in @fig-histograms zeigen die *Modus*-Lesezeiten?
3. Welche Darstellung(en) in @fig-histograms zeigen die *mittleren* Lesezeiten?
4. Welche Darstellung(en) in @fig-Histogrammen zeigt/zeigen den *Bereich* der Ablesezeiten?

## Zusammenfassende Statistiken

1. Schau dir @fig-errorbar an. 
    - Welche drei `geom` werden benötigt, um diese Darstellung zu erstellen?
    - Was stellt das linke obere Feld dar (z. B. Maßnahme, Satzregion)?
    - Welche Verbform hatte eine längere Regressionspfaddauer in der Verbregion?
    - Beschreiben Sie das Muster der Gesamtlesezeit in der Verbregion (d. h., welche Unterschiede stellen Sie zwischen den Bedingungen fest?).

```{r}
#| label: fig-errorbar
#| fig-cap: Mean reading times per condition (with +/- 1SD)
labs_measure = c(
  "first_pass" = "First-pass",
  "regression_path" = "Regression path",
  "total_time" = "Total time",
  "adverb" = "Adverb",
  "verb" = "Verb"
)

pd = position_dodge(0.2)
df_biondo_long %>% 
  drop_na() %>%  
  summarise(N = n(),
            mean = mean(time),
            sd = sd(time),
            upper = mean+sd,
            lower = mean-sd,
            .by = c(region, adverb_time,verb_tense,gramm, measure)) %>% 
  arrange(region, adverb_time, desc(gramm), measure) %>% 
  ggplot(aes(x = as_factor(gramm), y = mean, colour = verb_tense)) +
  facet_grid(region~measure, labeller = as_labeller(labs_measure)) +
  labs(y = "Reading time (ms)",
       x = "Grammaticality",
       colour = "Verb tense",
       linetype = "Verb tense") +
  geom_point(position = pd) +
  geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2, position = pd) +
  geom_line(aes(group = verb_tense, linetype = verb_tense), position = pd) +
  theme_bw()
```

# Data summaries

1. Erstellen Sie eine Tabelle wie @tbl-summarise aus dem Datenrahmen `df_biondo_long`. Sie müssen die Funktion `summarise()` verwenden, um die Anzahl der Beobachtungen (`n()`), den Mittelwert (`mean()`) und die Standardabweichung (`sd()`) zu berechnen. Denken Sie daran, die Daten nach (`.by = `) zu gruppieren, welche Variablen auch immer in @tbl-summarise angegeben sind.

```{r}
#| label: tbl-summarise
#| tbl-cap: summary of observations across regions
#| eval: true
sum_region_et <- 
  df_biondo_long %>% 
  drop_na() %>%  
  summarise(N = n(),
            mean = mean(time),
            sd = sd(time),
            .by = c(region, adverb_time,verb_tense, measure)) %>% 
  arrange(region, adverb_time, measure)
```


```{r}
#| label: tbl-summary
#| tbl-cap: "Mean and standard deviations per region and condition"
#| eval: true
sum_region_et %>% 
  knitr::kable() %>% 
  kableExtra::kable_styling()
```


# Plotten der Daten

In diesem Abschnitt werden Sie 2 Diagramme erstellen.

## Verteilungen

1. Erzeugen Sie @fig-violin. Du musst verwenden:
    - `df_biondo_long`
    - `filter()` (nur Verbregion)
    - 2 `geom`s
    - `facet_wrap(~)`
    - `labs()`
    - `position_jitterdodge()`
    - `alpha = ` (zur Kontrolle der Transparenz eines Geoms)

```{r}
#| label: fig-violin
#| fig-cap: Violin-scatterplot
pjd <- position_jitterdodge(jitter.width=.3, dodge.width= .8)
df_biondo_long %>% 
  filter(region == "verb") %>%
  ggplot(aes(x = adverb_time, y = time, colour = verb_tense)) +
  facet_wrap(~measure) +
  labs(title = "Distribution of reading times at the VERB region",
       x = "Adverb time reference",
       y = "Reading time (ms)",
       colour = "Verb tense") +
  geom_point(alpha = .2, position = pjd) +
  geom_violin(alpha = .5, position = position_dodge(.8)) +
  theme_bw()
```

## Split-violin plots

Für diese Aufgabe werden Sie eine neue Art von Diagramm erstellen: das Split-Violine-Diagramm. Dies ist derzeit nicht einfach mit `ggplot2` zu machen, also müssen wir ein neues Paket installieren: `introdataviz`. Dieses Paket begleitet @nordmann_data_2022, und hat auch ein [Online-Tutorial](https://psyteachr.github.io/introdataviz/advanced-plots.html).

1. Installieren Sie `introdataviz` (dies funktioniert nur, wenn Sie bereits das Paket `devtools` mit `pacman::p_load()` am Anfang dieses Skripts installiert/geladen haben)

```{r}
#| echo: true
# how to install the introdataviz package to get split and half violin plots
devtools::install_github("psyteachr/introdataviz")
```

2. Einladen von `Introdataviz`

```{r}
#| echo: true
library(introdataviz)
```

3. Erstellen Sie eine mehrschichtige Darstellung mit:
    - Datenrahmen `df_biondo_long`
    - Zeit" auf der y-Achse
    - `verb_tense` auf der x-Achse 
    - `gramm` `colour` und `fill` (Achtung: `gramm` muss `as_faktor()` gelesen werden)
    - Messung" in `facet_wrap(~)`
    - split-violin plot (`geom_split_violin()` aus `introdataviz`)
    - Boxplot (`Geom_boxplot()` aus `ggplot2`)

Tipp: Die Erstellung dieses Diagramms erfolgt auf genau dieselbe Weise, als ob Sie einfach `geom_violin()` anstelle von `geom_split_violin()` verwenden würden, um ein Violin-Boxplot-Diagramm zu erstellen.

3. Korrigieren Sie dann die Beschriftungen und passen Sie die Transparenz des `geom`s an (mit `alpha()`), so dass es ähnlich aussieht wie @fig-split-violin.

```{r}
#| label: fig-split-violin
#| fig-cap: A split-violin boxplot
df_biondo_long %>% 
  ggplot(aes(x = verb_tense, y = log(time), colour = as_factor(gramm), shape = as_factor(gramm), fill = as_factor(gramm))) +
  facet_wrap(~measure) +
  labs(title = "Distribution of eye-tracking during reading measures per condition",
       x = "Verb Tense",
       y = "Reading time (ms)",
       colour = "Grammaticality",
       shape = "Grammaticality",
       fill = "Grammaticality") +
  geom_split_violin(alpha = .2) +
  geom_boxplot(alpha = .2, aes(shape = as_factor(gramm))) +
  theme_bw()
```

# Code-Chunk-Optionen

Für diesen Bericht haben Sie zwei Tabellen gedruckt und zwei Diagramme erstellt. Wenn Sie dies noch nicht getan haben, erstellen Sie entsprechende Beschriftungen (`#| label: tbl-` oder `fig-`) und Überschriften (`tbl-cap:` oder `fig-cap:`) für diese Tabellen und Abbildungen.


# Session Info einbeziehen

Am Ende Ihres Berichts:

1. Erstellen Sie einen neuen Abschnitt (`# Session Info`)
2. Fügen Sie den folgenden Text als Inline-Text ein: 

> Hergestellt mit `` `r knitr::inline_expr("R.version.string")` `` (`` `r knitr::inline_expr("R.version$nickname")` ``).

3. Fügen Sie das Folgende in einen Codeabschnitt ein:

```{r}
#| eval: false
#| echo: true
sessionInfo()
```

Wenn Sie nun Ihr Dokument rendern, sollte eine Zusammenfassung der geladenen Pakete und ihrer Versionen angezeigt werden.

# Bericht einreichen

Wenn Sie fertig sind, laden Sie Ihr `.qmd`-Skript *und* die gerenderte Ausgabe im HTML-Format in Moodle hoch.

# Session Info {.unnumbered}

```{r}
#| eval: false
#| echo: false
RStudio.Version()$version
```

Hergestellt mit `r R.version.string` (`r R.version$nickname`) und RStudioversion 2023.3.0.386 (Cherry Blossom).

```{r}
sessionInfo()
```

# Literaturverzeichnis {.unlisted .unnumbered visibility="uncounted"}

::: {#refs custom-style="Bibliography"}
:::
