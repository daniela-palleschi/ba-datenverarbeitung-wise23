---
title: "Datenvisualisierung 2"
subtitle: "Darstellung der zusammenfassenden Statistik"
author: "Daniela Palleschi"
institute: Humboldt-Universität zu Berlin
footer: "Woche 10 - Datenvisualisierung 2" 
lang: de
date: "`r Sys.Date()`"
format: 
  html:
    output-file: data_viz2_blatt_EN.html
    include-after-body: custom.html
    number-sections: true
    number-depth: 3
    toc: true
    toc-title: "heutige Themen"
    code-overflow: wrap
    code-tools: true
    self-contained: true
    execute:
      fig-width: 6
      fig-asp: .618
      fig-align: centre
  revealjs: 
    output-file: data_viz2_folien_EN.html
    include-after-body: custom.html
    theme: [dark]
    width: 1600
    height: 900
    progress: true
    # smaller: true
    scrollable: true
    slide-number: c/t
    code-link: true
    code-overflow: wrap
    code-tools: true
    # logo: logos/hu_logo.png
    # css: logo.css
    incremental: true
    number-depth: 1
    toc: false
    toc-depth: 1
    toc-title: 'Überblick'
    navigation-mode: linear
    controls-layout: bottom-right
    fig-cap-location: top
    font-size: 0.6em
    slide-level: 4
    self-contained: true
    # chalkboard: true
    title-slide-attributes: 
      data-background-image: logos/logos.tif
      data-background-size: 15%
      data-background-position: 50% 92%
    execute:
      fig-width: 6
      fig-asp: .618
      fig-align: centre
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    code-overflow: wrap
    execute:
      out-width: "80%"
      fig-asp: .618
      fig-align: centre
bibliography: references/references.bib
csl: references/apa.csl
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
knitr::opts_chunk$set(eval = T, # evaluate chunks
                      echo = T, # 'print code chunk?'
                      message = F, # 'print messages (e.g., warnings)?'
                      error = F, # stop when error encountered
                      warning = F) # don't print warnings
```

```{r, eval = T, cache = F}
#| echo: false
# Create references.json file based on the citations in this script
# make sure you have 'bibliography: references.json' in the YAML
# rbbt::bbt_update_bib("_dataviz2_EN.qmd")
```

```{r}
#| eval: false
#| echo: false
addTaskCallback(function(...) { system("say -v Kathy Your script is done"); TRUE }, name = "announce when done")
```

# Wiederholung {.unnumbered}

Letzte Woche haben wir...

- Maße der zentralen Tendenz (neu) kennengelernt ✅
- Maße der Streuungsmaßen kennengelernt ✅
- gelernt, wie man die Funktion `summarise()` von `dplyr` benutzt ✅
- gelernt, wie man Zusammenfassungen nach (`.by =`) Gruppen erstellt ✅

# Heutige Ziele {.unnumbered}

This week we will learn how to...

- use `facet_wrap()` to plot more than three variables
- visualise summary statistics
- create multi-part plots

## Lust auf mehr?

- Section 2.5 ([Visualising relationsips](https://r4ds.hadley.nz/data-visualize.html#visualizing-relationships)) in @wickham_r_nodate

- Ch. 4 ([Representing summary statistics](https://psyteachr.github.io/introdataviz/representing-summary-statistics.html)) in @nordmann_data_2022

# Einrichtung

```{r}
pacman::p_load(tidyverse,
               here,
               palmerpenguins,
               ggthemes,
               patchwork)
```

```{r}
#| echo: false
# load magick for the slides
pacman::p_load(magick)
```


```{r}
df_penguins <- palmerpenguins::penguins %>% 
  drop_na()
```



# Review: Visualising distributions

- we did this in week 3 using
  + histograms (1 numerical variable)
  + density plots (1 numerical variable)
  + scatterplots (2 numerical variables)
  + barplots (categorical variables)
  
---

```{r}
#| echo: false
fig_hist <-
  df_penguins %>% 
  ggplot(aes(x = body_mass_g, fill = species)) +
  geom_histogram(binwidth = 200) +
  labs(
       x = "Body mass (g)",
       y = "Count",
    fill = "Species") +
  scale_color_colorblind() +
  scale_fill_colorblind() +
  theme_minimal()

fig_dens <-
  df_penguins %>% 
  ggplot(aes(x = body_mass_g, fill = species, colour = species)) +
  geom_density(alpha=.2) +
  labs(
       x = "Body mass (g)",
       y = "Density",
    color = "Species",
    fill = "Species") +
  scale_color_colorblind() +
  scale_fill_colorblind() +
  theme_minimal()

fig_scat <-
  df_penguins %>% 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = species), alpha = .3) +
  geom_smooth(method = "lm") +
  labs(
    x = "Flipper length (mm)",
    y = "Body mass (g)",
    color = "Species",
    shape = "Species"
  ) +
  scale_color_colorblind() +
  theme_minimal()

fig_bar <-
  df_penguins %>% 
  ggplot(
       aes(x = species, fill = sex)) +
  geom_bar() +
    labs(
    x = "Species",
    y = "Count",
    fill = "Sex"
  ) +
  scale_fill_colorblind() +
  theme_minimal()

fig_bar_dodge <-
  df_penguins %>% 
  ggplot(
       aes(x = species, fill = sex)) +
  geom_bar(position="dodge") +
    labs(
    x = "Species",
    y = "Count",
    fill = "Sex"
  ) +
  scale_fill_colorblind() +
  theme_minimal()
```

- how many variables are represented in each figure in @fig-distributions?
  + what *types* of variables are represented in each plot type?

```{r}
#| echo: false
#| label: fig-distributions
#| fig-cap: "Different plots types to visualise distribution of raw data: histogram (A), density plot (B), scatterplot (C), stacked barplot (D), and dodged barplot (E)"
#| fig-width: 8
#| fig-asp: .5

(fig_hist + fig_dens) /
  (plot_spacer() + fig_scat + plot_spacer() + plot_layout(widths = c(1,2,1))) /
  (fig_bar + fig_bar_dodge) +
  plot_annotation(tag_levels = "A") +
  theme(plot.title = element_blank()) 
```

## Violin plots

- we can also use violin plots, which are pretty trendy at the moment
  + basically a double-sided/mirrored density plot
- violin plots are considered easier to read
  + as we'll see later, they're easy to layer with other plots too

```{r}
#| code-fold: true
#| label: fig-violin1
#| fig-cap: "Violin plot: a mirrored density plot"
#| output-location: column-fragment
#| code-line-numbers: "3"
#| fig-width: 6
#| fig-asp: .6

  df_penguins %>% 
  ggplot(aes(x = species, y = body_mass_g, fill = species)) +
  geom_violin(alpha = .2) +
  labs(title = "Violin plot",
       x = "Body mass (g)",
       y = "Count",
    fill = "Species") +
  scale_color_colorblind() +
  scale_fill_colorblind() +
  theme_minimal()
```

---

::: {.callout-tip}

## 'Mirrored' density plot

What does 'mirrored' density plot mean? Violin plots are literally just a double-sided density plot. Compare @fig-violin1 to @fig-density3. They show the same data and the same distribution, but the violin plot is simply a density plot on both sides, but without the `density` values printed along the axis.

:::: columns

::: {.column width="50%"}
```{r}
#| code-fold: true
#| label: fig-density2
#| fig-cap: "Density plot: same violin plot"
#| fig-width: 4
#| fig-asp: .9
  df_penguins %>% 
  ggplot(aes(y = body_mass_g, fill = species)) +
  facet_grid(~species) +
  geom_density(alpha = .2) +
  labs(title = "Density plot"
       ) +
  scale_color_colorblind() +
  scale_fill_colorblind() +
  theme_minimal()
```

:::

::: {.column width="50%"}
```{r}
#| code-fold: true
#| label: fig-violin2
#| fig-cap: "Violin plot: a mirrored density plot"
#| fig-width: 6
#| fig-asp: .6

  df_penguins %>% 
  ggplot(aes(x = species, y = body_mass_g, fill = species)) +
  geom_violin(alpha = .2) +
  labs(title = "Violin plot",
       x = "Body mass (g)",
       y = "Count",
    fill = "Species") +
  scale_color_colorblind() +
  scale_fill_colorblind() +
  theme_minimal()
```
:::
::::

:::

# Visualising 3 or more variables

- as we know, we can incorporate more variables by mapping them onto aesthetics (e.g., `colour`, `fill`, or `shape`) 
- @fig-distributions did this by using `colour` (all plots) and `shape` (scatterplot) to visualise `species` or `sex` in addition to what was mapped along the x- and y-axes

---

- adding too many variables into a single plot can make it diffcult to read
- for example, how many variables are mapped in the following code?

```{r}
#| ouput-location: column-fragment
#| code-line-numbers: "|2|3|2,3"
#| label: fig-cluttered
#| output-location: column-fragment
#| fig-cap: A cluttered scatterplot with 4 variables

df_penguins %>% 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = island)) +
  labs(
    x = "Flipper length (mm)",
    y = "Body mass (g)",
    color = "Species",
    shape = "Island"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```

- four: `flipper_length_mm` (x-axis), `body_mass_g` (y-axis), `species` (color), `island` (shape)
- this is a bit visually cluttered!

## `facet_wrap()`

- a nice way to split our data into different plots is by using the `facet_wrap()`
  + can be used to split one cluttered plot into separate panels based on a categorical variable

---

- let's try using `facet_wrap()` to divide @fig-cluttered into three panels, by `island`

```{r}
#| code-line-numbers: "|3"
#| label: fig-facet_wrap
#| fig-cap: A cluttered scatterplot with 4 variables
#| fig-width: 8
#| fig-asp: .5
#| output-location: column-fragment

df_penguins %>% 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  facet_wrap(~island) +
  geom_point(aes(color = species, shape = species)) +
  labs(
    x = "Flipper length (mm)",
    y = "Body mass (g)",
    color = "Species",
    shape = "Island"
  ) +
  scale_color_colorblind() +
  theme_bw()
```

- what type of variables can `facet_wrap()` take as its argument(s)?
  + categorical! Each 'category' gets its own panel
---

::: callout-note
### `facet_grid()`

`facet_wrap()` is related to `facet_grid()`, which can take two categorical variables, one in columns and one in rows. The argument for `facet_grid()` is an equation: `row~column`. So, if we add `facet_grid(sex~island)` to our plot, we should see the data in plots grouped by `sex` in rows (one row for `female`, one row for `male`) and `island` in columns (one column for each `island`)

```{r}
#| code-line-numbers: "|3"
#| label: fig-facet_grid
#| fig-cap: "facet_grid(sex~species)"
#| output-location: column
#| fig.width: 7
#| fig.asp: .6

df_penguins %>% 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  facet_grid(sex~island) +
  geom_point(aes(color = species, shape = species)) +
  labs(
    x = "Flipper length (mm)",
    y = "Body mass (g)",
    color = "Species",
    shape = "Species"
  ) +
  scale_color_colorblind() +
  theme_bw()
```

:::

# Representing summary statistics

- last week we talked about summary statistics
  + measures of central tendency and measures of dispersion
- now we will learn how to visualise some of these statistics
  + and learn some new ones

## Boxplot {.smaller}

:::: columns

::: {.column width="60%"}
- boxplots (sometimes called box-and-whisker plots) contain:
  + a **box** with a **line in the middle**
  + **lines sticking out** of the top and bottom of the box (the whiskers)
- which represent:
  + **thick line**: the median, also called Q2 (2nd quartile; the middle value above/below which 50% of the data lie)
  + **box**: the interquartile range (IQR; the range of values between the middle 50% of the data lie), with the boundaries:
    + Q1 (1st quartile, below which 25% of the data lie)
    + Q3 (3rd quartile, above which 25% of the data lie)
  + **whiskers**: 1.5*IQR from Q1 (lower whisker) or Q3 (upper whisker)
  + **dots**: outliers (outside the IQR)

:::

::: {.column width="40%"}

```{r}
#| ouput-location: column-fragment
#| echo: false
#| code-line-numbers: "|4"
#| label: fig-boxplot
#| fig-cap: "Boxplot of `df_penguins` (body mass by sex)"

df_penguins %>% 
  ggplot(aes(x = sex, y = body_mass_g, colour = sex)) +
  geom_boxplot() +
  labs(title = "Boxplot",
    x = "Sex",
    y = "Body mass (g)",
    color = "Sex"
  ) +
  scale_color_colorblind() +
  theme_minimal() +
  theme(
    legend.position = "none"
  )
```
:::
::::


::: {.content-visible when-format="revealjs"}
::: notes
whiskers: 1.5*IQR from Q1 (lower whisker) or Q3 (upper whisker)
outliers: outside that range
:::
:::

---


::: {.content-visible when-format="revealjs"}
```{r echo = F, fig.align = "center"}
#| fig-cap: "Image source: @winter_statistics_2019 (all rights reserved)"
#| fig-cap-location: bottom

# invert colours for dark mode in slides
library(magick)
magick::image_negate(magick::image_read(here::here("media/Winter_2019_boxplot.png")))
```
:::

::: {.content-hidden when-format="revealjs"}
```{r echo = F, fig.align = "center"}
#| fig-cap: "Image source: @winter_statistics_2019 (all rights reserved)"
#| fig-cap-location: bottom
magick::image_read(here::here("media/Winter_2019_boxplot.png"))
```
:::

---

Or, explained another way:

::: {.content-visible when-format="revealjs"}
```{r echo = F, fig.align = "center"}
#| fig-cap: "Image source: @wickham_r_nodate (all rights reserved)"
#| fig-cap-location: bottom

# invert colours for dark mode in slides
y <- magick::image_read(here::here("media/Wickham_boxplot.png"))

magick::image_negate(y)
```
:::

::: {.content-hidden when-format="revealjs"}
```{r echo = F, fig.align = "center"}
#| fig-cap: "Image source: @wickham_r_nodate (all rights reserved)"
#| fig-cap-location: bottom
magick::image_read(here::here("media/Wickham_boxplot.png"))
```
:::

### `geom_boxplot()`

- we can produce boxplots with `geom_boxplot()`

```{r}
#| code-line-numbers: "|3"
#| label: fig-geom-boxplot
#| fig-cap: "`geom_boxplot()`"
#| output-location: column
#| fig-asp: .618
df_penguins %>% 
  ggplot(aes(x = species, y = body_mass_g)) +
  geom_boxplot() +
  theme_bw()
```

- how many/what times types of variable(s) does `geom_boxplot()` take?
  - 2 variables: 1 continuous, 1 categorical

### Grouped boxplot

- like a bargraph, we can produced grouped boxplots to visualise more variables
  + just map a new variable with `colour` or `fill` aesthetic

```{r}
#| output-location: column-fragment
#| fig-width: 7
#| label: df_boxplot_group
#| fig-cap: A grouped boxplot
df_penguins %>% 
  ggplot(aes(x = species, y = body_mass_g, colour = sex)) +
  geom_boxplot() +
  labs(
    x = "Species",
    y = "Body mass (g)",
    color = "Species",
    shape = "Species"
  ) +
  scale_colour_colorblind() +
  theme_bw()
```


# Visualing the mean

- boxplots show a measure of central tendency, and several measures of dispersion
  + median, IQR (Q1 and Q3), 1.5*IQR (whiskers), and outliers (dots)
- but we typically want to describe the mean and standard deviation when drawing conclusions about differences between groups
- how might we do this?

## Errorbar plots

:::: columns

::: {.column width="60%"}
- we can visualise the mean and standard deviation with errorbar plots
  + sometimes called interaction plots
- these plots have 2 parts:
  + the mean, visualised with `geom_point()`
  + the sd, visualised with `geom_errorbar()`
- the errorbars plot the range from 1 standard deviation above and below the mean (mean +/- 1SD)
:::

::: {.column width="30%"}
```{r}
#| ouput-location: column-fragment
#| echo: false
#| label: fig-errorbar
#| out-width: "100%"
#| fig-cap: "Errorbar plot of `df_penguins` (body mass by sex)"

df_penguins %>% 
  summarise(mean = mean(body_mass_g),
            sd = sd(body_mass_g),
            N = n(),
            .by = c(sex)) %>% 
  ggplot(aes(x = sex, y = mean, colour = sex)) +
  # geom_point(data = df_penguins, alpha = .4, position = position_jitterdodge(.5), aes(x = sex, y = body_mass_g)) +
  geom_point(size = 3) +
  geom_errorbar(width = .5, aes(ymin=mean-sd, ymax=mean+sd)) +
  labs(title = "Errorbar plot",
    x = "Sex",
    y = "Body mass (g)",
    color = "Sex"
  ) +
  scale_color_colorblind() +
  theme_minimal() +
  theme(
    legend.position = "none"
  )
```

:::
::::

#### Computing summary statistics

- we need to first calculate the mean and standard deviation, grouped by whatever variables we want to visualise
  + let's stick with `body_mass_g` by `species` and `sex`
  + how can we compute the `mean` and `sd` of `body_mass_g` by `species` and `sex`?
  
```{r}
#| output-location: column-fragment
#| code-fold: true
#| code-line-numbers: "2,3,4,5"
df_penguins %>% 
  summarise(mean = mean(body_mass_g),
            sd = sd(body_mass_g),
            N = n(),
            .by = c(species,sex)) %>% 
  arrange(species, sex) %>% 
  knitr::kable() %>% 
  kableExtra::kable_styling(font_size = 30)
```

---

- we have to feed this summary into `ggplot2`
  + ***without*** the table formatting from `knitr` and `kableExtra`!!!!
  + we can do this by saving the summary as a `new object`, or feeding the summary into ggplot directly `with a pipe`

::: {.panel-tabset}
#### New object
```{r}
#| output-location: column-fragment
# Create new object with summaries
sum_penguins <- df_penguins %>% 
  summarise(mean = mean(body_mass_g),
            sd = sd(body_mass_g),
            upper = mean+sd,
            lower = mean-sd,
            N = n(),
            .by = c(species,sex)) %>% 
  arrange(species, sex)
# Feed new object into ggplot
sum_penguins %>% 
  ggplot(aes(x = sex, y = mean, colour = species)) 
```

#### With a pipe

```{r}
#| output-location: column-fragment
df_penguins %>% 
  summarise(mean = mean(body_mass_g),
            sd = sd(body_mass_g),
            upper = mean+sd,
            lower = mean-sd,
            N = n(),
            .by = c(species,sex)) %>% 
  arrange(species, sex) %>% 
  ggplot(aes(x = sex, y = mean, colour = species)) 
```

:::

#### Plotting mean

- we do this with `geom_point()`

```{r}
#| output-location: column-fragment
sum_penguins %>% 
  ggplot(aes(x = sex, y = mean, 
             colour = species, shape = species)) +
  geom_point()
```

#### Adding errorbars

- we do this with `geom_errorbar()`

```{r}
#| output-location: column-fragment
sum_penguins %>% 
  ggplot(aes(x = species, y = mean, 
             colour = sex, shape = sex)) +
  geom_point() +
  geom_errorbar(aes(ymin=lower,ymax=upper)) 
```

- we need to add the mapping aesthetics for the upper and lower limits of the errorbar
  + `aes(ymin = mean-sd, ymax = mean+sd)`
  + we used summarise to compute `mean-sd` (`lower`) and `mean+sd` (`upper`) for each group for us, so we can use those instead

---

::: {.callout-warning}

## Barplot of mean: stay away!

I implore you, *do not* plot means using error bars! You will very often see barplots of mean values, and others might even teach this in other courses, but there are lots of reasons why this is a bad idea!!

Firstly, they can be very misleading. They start at 0 and give the impression that data stop at the mean, when about half the data is (usually) above the mean.

:::: columns

::: {.column width="50%"}
- recall the `datasauRus` package, which contains datasets with similar means, standard deviations, and number of observations
  + but *very* different distributions
- @fig-dino-barplot shows the distribution of 5 of these datasets (top row), and the mean, sd, and number of observations for the variables `x` and `y`
  + you'll see that the distributions look very different
- for this reason, it's a good reason to *always* visualise your raw datapoints regardless of what summary plot you produce (e.g., errorbar plots also hide a lot of data)
:::

::: {.column width="50%"}

```{r}
#| echo: false
fig_datasaurus_scatter <- datasauRus::datasaurus_dozen %>% 
  filter(dataset %in% c("away", "bullseye", "circle", "dino", "star")) %>% 
ggplot(aes(x = x, y = y, colour = dataset))+
  geom_point() +
  theme_minimal() +
  theme(legend.position = "none")+
  facet_wrap(~dataset, ncol = 5)

fig_datasaurus_bar <-
  datasauRus::datasaurus_dozen %>% 
  filter(dataset %in% c("away", "bullseye", "circle", "dino", "star")) %>% 
  pivot_longer(cols = c(x,y),
               names_to = "variable",
               values_to = "value") %>% 
  summarise(mean = mean(value),
            sd = sd(value),
            n = n(),
            .by = c(dataset, variable)) %>% 
  pivot_wider(
    id_cols = dataset,
    names_from = variable,
    values_from = c(mean,sd,n)
  ) %>% 
    pivot_longer(
      cols = c(2:7),
      names_to = "measure",
      values_to = "value"
    ) %>% 
ggplot(aes(x = measure, y = value, fill = dataset)) +
  facet_grid(~dataset) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  theme(legend.position = "none") +
  theme(axis.text.x = element_text(angle = 45, hjust=1))
  

```

```{r}
#| fig-width: 8
#| fig-asp: .6
#| label: fig-dino-barplot
#| fig-cap: Datasets with the same means, sds, and Ns, but very different distributions
#| echo: false

fig_datasaurus_scatter / fig_datasaurus_bar
```

:::

::::

:::

### Customising

- what customisations do you see in the code and plot?

```{r}
#| output-location: column-fragment
sum_penguins %>% 
  ggplot(aes(x = species, y = mean, 
             colour = sex, shape = sex)) +
  geom_point(position = position_dodge(0.3),
             size = 3) +
  geom_errorbar(aes(ymin=lower,ymax=upper),
                position = position_dodge(0.3), 
                width = .3) +
  scale_colour_colorblind() +
  theme_minimal()
```

---

- `position = posiiton_dodge(0.3)` tells `ggplot2` how to position objects
  + `position_dodge()` means: move overlapping objects horizontally
  + importantly, you need to use `position_dodge()` for *every* `geom_` that is supposed to be at the same location, and with the same value; otherwise they won't be aligned
- `geom_point(size = 3)`: adjust the size of the points
- `geom_errorbar(width = .3)`: adjust the width of the errorbars
  + tip: I always give the same value to `position_dodge()` and `geom_errorbar(width = )`, this way the errobars always touch the 'middle' line (try changing either value to see what I mean)
- `scale_colour_colorblind()`: use a colorblind-friendly colour scheme
- `theme_minimal()`: cleans up the plot (we've also seen `theme_bw()`, more about themes [here](https://ggplot2.tidyverse.org/reference/ggtheme.html))

# Multi-part plots

- we can combine various types of plots to summarise our data but also provide the distribution
  + this is easiest when they use the same underlying data, like violin plots and boxplots

```{r}
#| output-location: slide
#| code-line-numbers: "4,5"
#| label: fig-violin-boxplot
#| fig-cap: "A violin-boxplot"
df_penguins %>% 
  ggplot(aes(x = species, y = body_mass_g, 
             colour = sex, shape = sex)) +
  geom_violin(aes(fill = sex), alpha = .1, position = position_dodge(.9)) +
  geom_boxplot(width = .2, position = position_dodge(.9)) +
  scale_colour_colorblind() +
  scale_fill_colorblind() +
  theme_minimal()
```

## Plotting different data

- this is trickier when we want to plot summaries (like error bar plots) *and* distributions
  + errorbar plots take data summaries (mean, sd)
  + violin, boxplot, and scatterplots all take the raw data (each row = observation)

---

- let's try to add a scatterplot to our errorbar plot
  + this could be done several ways, e.g., 
    + taking a scatter plot and adding the mean and errorbar `geom`s
    + or taking our errorbar plot and adding a scatterplot `geom`
- the latter is a bit simpler, so let's try that

---

### Add scatterplot to errorbar

- use `geom_point()` with the `data` and `aes()` needed

```{r}
#| output-location: column-fragment
#| code-line-numbers: "4,5"
#| label: fig-errorbar-scatter1
#| fig-cap: "Scatterplot with errorbar"
sum_penguins %>% 
  ggplot(aes(x = species, y = mean, 
             colour = sex, shape = sex)) +
  geom_point(data = df_penguins, 
             aes(x = species, y = body_mass_g)) +
  geom_point(position = position_dodge(0.3),
             size = 3) +
  geom_errorbar(aes(ymin=lower,ymax=upper),
                position = position_dodge(0.3), 
                width = .3) +
  scale_colour_colorblind() +
  theme_minimal()
```

### Customise scatterplot

- with `position_dodge()`

```{r}
#| output-location: column-fragment
#| code-line-numbers: "6"
#| label: fig-errorbar-scatter2
#| fig-cap: "Scatterplot with errorbar"
sum_penguins %>% 
  ggplot(aes(x = species, y = mean, 
             colour = sex, shape = sex)) +
  geom_point(data = df_penguins, 
             aes(x = species, y = body_mass_g),
             position = position_dodge(0.3)) +
  geom_point(position = position_dodge(0.3),
             size = 3) +
  geom_errorbar(aes(ymin=lower,ymax=upper),
                position = position_dodge(0.3), 
                width = .3) +
  scale_colour_colorblind() +
  theme_minimal()
```

### Add `alpha` value

- so we can distinguish overlapping values

```{r}
#| output-location: column-fragment
#| code-line-numbers: "7"
#| label: fig-errorbar-scatter3
#| fig-cap: "Scatterplot with errorbar"
sum_penguins %>% 
  ggplot(aes(x = species, y = mean, 
             colour = sex, shape = sex)) +
  geom_point(data = df_penguins, 
             aes(x = species, y = body_mass_g),
             position = position_dodge(0.3),
             alpha = .4) +
  geom_point(position = position_dodge(0.3),
             size = 3) +
  geom_errorbar(aes(ymin=lower,ymax=upper),
                position = position_dodge(0.3), 
                width = .3) +
  scale_colour_colorblind() +
  theme_minimal()
```

### Change position

- `position_jitterdodge()` moves objects to not overlap
  + we can set `dodge.width = .3` to match `position_dodge()` of errorbars
  + and `jitter.width = ` to say how much we want the points to jitter
  + and `geom_errorbar(size = 1)` makes the errorbar lines thicker

```{r}
#| output-location: column-fragment
#| code-line-numbers: "|6,7,14"
#| label: fig-errorbar-scatter4
#| fig-cap: "Scatterplot with errorbar"
sum_penguins %>% 
  ggplot(aes(x = species, y = mean, 
             colour = sex, shape = sex)) +
  geom_point(data = df_penguins, 
             aes(y = body_mass_g),
             position = position_jitterdodge(dodge.width = .3, 
                                  jitter.width = 0.3),
             alpha = .4) +
  geom_point(position = position_dodge(width =0.3),
             size = 3) +
  geom_errorbar(aes(ymin=lower,ymax=upper),
                position = position_dodge(0.3), 
                width = .3,
                size = 1) +
  scale_colour_colorblind() +
  theme_minimal()
```

# Heutige Ziele 🏁 {.unnumbered .unlisted}

Heute haben wir gelernt, wie man...

- use `facet_wrap()` to plot more than three variables ✅
- visualise summary statistics ✅
- create multi-part plots ✅

# Aufgaben

## Boxplot with facet

::: nonincremental
1. Produce a boxplot of the `df_penguins` data, with:
    + `sex` plotted on the `x` axis and with `colour` *or* `fill` (choose one)
    + `flipper_length_mm` plotted along the `y` axis
    + `island` plotted in three panels using `facet_wrap()`
    + whichever `theme_` setting you choose (e.g., `theme_bw()`; for more options see [here](https://ggplot2.tidyverse.org/reference/ggtheme.html))
:::
  
## Code chunk options

::: nonincremental
2. Add a `label` to the figure (`fig-...`) and a caption (`fig-cap: `). Briefly describe the plot, using a cross-reference (*`@fig-...` shows that...*).
:::

## Multi-layered plot

::: nonincremental
3. Try to reproduce @fig-violin-box-scatterplot. Hint: You will need to add one `geom_` and some labels to @fig-violin-boxplot.
:::
```{r}
#| echo: false
#| label: fig-violin-box-scatterplot
#| fig-cap: "A multi-layered plot"
df_penguins %>% 
  ggplot(aes(x = sex, y = flipper_length_mm, 
             colour = sex, shape = sex)) +
  facet_wrap(~island) +
  geom_boxplot(position = position_dodge(width =0.4)) +
  scale_colour_colorblind() +
  theme_bw() +
  theme(legend.position = "none")
```

## Patchwork {.smaller}

::: nonincremental
4. Using the `patchwork` package (see week 3 notes), plot your boxplot and your errorbar/violin plots side by side. It should look something like @fig-patchwork.
    + hint: if you want to add the "tag levels" ("A" and "B"), you need to add `+ plot_annotation(tag_level = "A")` from `patchwork`
:::
```{r}
#| echo: false

fig_aufgabe1 <- df_penguins %>% 
  ggplot(aes(x = sex, y = flipper_length_mm, 
             colour = sex, shape = sex)) +
  facet_wrap(~island) +
  labs(title = "Boxplot",
       y = "Flipper length (mm)",
       colour = "Sex",
       shape = "Sex") +
  geom_boxplot(position = position_dodge(width =0.4)) +
  scale_colour_colorblind() +
  theme_bw() +
  theme(legend.position = "none")

fig_aufgabe2 <- sum_penguins %>% 
  ggplot(aes(x = species, y = mean, 
             colour = sex, shape = sex)) +
  labs(title = "Errorbar with scatterplot",
       x = "Species",
       y = "Body mass (g)",
       colour = "Sex",
       shape = "Sex") +
  geom_point(data = df_penguins,
             aes(y = body_mass_g),
             position = position_jitterdodge(dodge.width=.5,
                                             jitter.width=.3),
             alpha = .2) +
  geom_point(position = position_dodge(width =0.5),
             size = 3) +
  geom_errorbar(aes(ymin=lower,ymax=upper),
                position = position_dodge(0.5), 
                width = .3, size = 1) +
  scale_colour_colorblind() +
  theme_bw()
```

```{r}
#| label: fig-patchwork
#| fig-cap: Combined plots with `patchwork`
#| echo: false
#| fig-width: 8
#| fig-asp: .5
fig_aufgabe1 + fig_aufgabe2 + plot_annotation(tag_levels = "A")
```



# Session Info {.unnumbered}

```{r}
#| eval: false
#| echo: false
RStudio.Version()$version
```


Hergestellt mit `r R.version.string` (`r R.version$nickname`) und RStudioversion 2023.3.0.386 (Cherry Blossom).

```{r}
print(sessionInfo(),locale = F)
```

# Literaturverzeichnis {.unlisted .unnumbered visibility="uncounted"}

::: {#refs custom-style="Bibliography"}
:::