---
title: "Einführung in R und RStudio"
# subtitle: ""
author: "Daniela Palleschi"
institute: Humboldt-Universität zu Berlin
footer: "Woche 1 - R und RStudio"
lang: de
date: "`r Sys.Date()`"
format:
  html:
    output-file: rstudio_blatt.html
    number-sections: true
    number-depth: 3
    toc: true
    toc-title: "heutige Themen"
    code-overflow: wrap
    code-tools: true
    self-contained: true
  revealjs: 
    output-file: rstudio_folien.html
    theme: [dark]
    width: 1600
    height: 900
    progress: true
    # smaller: true
    scrollable: true
    slide-number: c/t
    code-link: true
    code-overflow: wrap
    code-tools: true
    # logo: logos/hu_logo.png
    # css: logo.css
    incremental: true
    # number-sections: true
    toc: true
    toc-depth: 1
    toc-title: 'Überblick'
    number-sections: true
    number-depth: 1
    navigation-mode: linear
    controls-layout: bottom-right
    fig-cap-location: top
    font-size: 0.6em
    slide-level: 4
    self-contained: true
    # chalkboard: true
    title-slide-attributes: 
      data-background-image: logos/logos.tif
      data-background-size: 15%
      data-background-position: 50% 92%
  pdf:
    output-file: rstudio.pdf
    toc: true
    number-sections: true
    colorlinks: true
    code-overflow: wrap
bibliography: references/references.bib
csl: references/apa.csl
---

```{r}
#| echo: false
knitr::opts_chunk$set(eval = T, # evaluate chunks
                      echo = T, # 'print code chunk?'
                      message = F, # 'print messages (e.g., warnings)?'
                      error = F, # stop when error encountered
                      warning = F) # don't print warnings
```

```{r, eval = T, cache = F}
#| echo: false
# Create references.json file based on the citations in this script
# make sure you have 'bibliography: references.json' in the YAML
rbbt::bbt_update_bib("_rstudio.qmd")
```

# Today's goals {-}

- Install R and RStudio
- be able to install add-on packages
- be able to get help for packages and functions
- be able to create objects in the console

# R in RStudio

1. open RStudio
2. click on 'File > New File > R Script

- you will now see four squares:
    - Text Editor - top left
        - where we will write our code
    - R Console (EN: Console) - bottom left
        - where we will see the output of our code and warning/error messages
    - Working Environment (EN: Environment) - top right
        - where our data and objects will be stored after loading
    - Files and graphics output - bottom left
        - where we can see our files and the graphics we created or get help

## Extension packages

- R has a number of native functions and datasets that we can access
    - similar to the standard apps that come pre-installed on your phone
- Anyone can create add-on packages for R, e.g.,
    - for data visualization
    - data processing
- This is similar to cell phone apps that anyone can create and download to your device
    - but packages are *always free*.
- There are 2 steps to using a package:
    1. install the package (once).
    2. download the package (at the beginning of each session)

### Package installation

- is done with the function `install.packages()`.
    - you do this only once (like downloading an app)
- the package `tidyverse` is very useful for data processing and visualization
    - Let's install it now

### package installation {.unlisted .unnumbered}

- install `tidyverse` and `beepr` packages

```{r}
#| eval: false
install.packages("tidyverse")
install.packages("beepr")
```

::: callout-important
## Installing packages in the console

Always install packages from the console, not from a script!

You can also use the packages tab in the lower right box (packages \> install).
:::

### `tinytex`

- we also need LaTeX and `tinytex` [@xie_tinytex_2023] to create PDF documents
- run this code to install `tinytex`

```{r}
#| eval: false
# run this in the console
install.packages("tinytex")
tinytex::install_tinytex()
```

- You also need to install LaTeX if you don't already have it: <https://www.latex-project.org/get/>

## Loading a package

- the `library()` command loads a package into your environment
- this must be done at the beginning of each session to access the corresponding package

```{r}
library(beepr)
```

### Using a function

- Once you have loaded a package, you can access its functions
- For example, the package `beepr` has a function `beep()`, let's try it out

```{r, filename="run in console"}
beep()
```

### Function arguments

- Arguments contain optional information that is passed to a function
  + The `beep()` function has the `sound` argument, which takes a numeric value of 1:11.
  + Try to execute the following code with other numbers, what happens?

```{r, filename="run in console"}
beep(sound = 5)
```

### function arguments {.unlisted .unnumbered}

::: callout-note
### `help`
You can find out more about a function (including its available arguments) by writing its name after a question mark in the console (e.g. `?beep`). Try to execute `?beep`. Can you find out from the help page what you can write instead of `sound = 5` to produce the same sound?
:::

## task

::: callout-tip
## task

We also need the `here` package. Install it.

After installing the package, run the `here()` command. What happens?
:::

# reproducibility

- in this course we will learn how to create *reproducible reports*.
    - this means that our code can be run again later and still give the same results
- if your work is reproducible, other people (and you) can understand and review your work
    - For course assignments, you will submit reports as well as source code that I should be able to run on my computer

## RStudio settings

- we always want to start with a free workspace in RStudio to ensure reproducibility
    - we also never want to save our workspace for later
    - we only want to save our code (and output reports)
- Go to `Tools > Global Options`
    - Uncheck the `Restore .RData into workspace at startup` checkbox
    - Set `Save workspace to .RData on exit:` to `Never`.

## RStudio settings {.unlisted .unnumbered}

:::: columns
::: {.column width="50%"}
`RStudio: Tools > Global Options`:

- `Restore .RData into workspace at startup`
    - no
- `Save workspace to .RData on exit:`
    - Never

:::
::: {.content-visible when-format="revealjs"}
::: {.column width="50%"}
```{r eval = T, fig.env = "figure", out.width="100%", fig.align = "center", fig.pos="H", set.cap.width=T, fig.cap="Your 'Global Options' should look like this"}
#| echo: false

library(magick)
magick::image_read(here::here("media/RStudio_global-options.png"))
```
:::
:::

::: {.content-visible when-format="pdf"}
::: {.column width="50%"}
```{r eval = T, fig.env = "figure", out.width="100%", fig.align = "center", fig.pos="H", set.cap.width=T, fig.cap="Your 'Global Options' should look like this"}
#| echo: false

library(magick)
magick::image_read(here::here("media/RStudio_global-options.png"))
```
:::
:::
::::

::: {.content-hidden when-format="revealjs"}
::: {.content-hidden when-format="pdf"}
```{r eval = T, fig.env = "figure", out.width="75%", fig.align = "center", fig.pos="H", set.cap.width=T, fig.cap="Your 'Global Options' should look like this"}
#| echo: false

library(magick)
magick::image_read(here::here("media/RStudio_global-options.png"))
```
:::
:::

## RStudio settings {.unlisted .unnumbered}

- Click on `Appearance` (left column)
    - Open the `Editor Theme` options and choose a color scheme you like
    - You can also change the font/font size if you want to

## R-Projects

- Before we continue, you will need to set up an R project for this course:
    - In RStudio: `File > New Project > New Directory > New Project > Create Project`.
    - Name the project for this course

- :: callout-tip
    In your computer's file manager, navigate to the project folder: click on the file `.RProj`.
    :::

    - This will open RStudio
    - Create a new folder named `data`.
    - Create a new folder where you will store your course notes/exercises (name it whatever you want)

### Project folder structure

::: {.column width="30%"}
New folder (EN: New Folder)

- data (exactly what you call it)
- notes (or whatever you want to call it)

- In the 'notes' folder, create another folder called '01-rstudio'.
  + This is the folder that contains today's script.
:::

::: {.content-hidden when-format="html"}
::: {.column width="70%"}
```{r eval = T, fig.env = "figure",out.height="100%", fig.pos = "H", fig.align = "center", set.cap.width=T, fig.cap="Your 'Files' (bottom right) should look like this"}
#| echo: false

library(magick)
magick::image_read(here::here("media/RProj_folders.png"))
```
:::
:::

::: {.content-visible when-format="html"}
```{r eval = T, fig.env = "figure",out.width="100%", fig.pos="H", fig.align = "center", fig.cap="Ihre 'Files' (unten rechts) sollten so aussehen"}
#| echo: false

library(magick)
magick::image_read(here::here("media/RProj_folders.png"))
```
:::


## Task {.smaller}

::: {.column width="40%"}

- in RStudio: 'File > New File > R Script'.
  + when a new window opens in the upper left corner: `File > Save As...'.
    + save it in your 01-rstudio folder
  + write at the top of the script: `# Applied Data Processing and Visualization - Week 1 (04/17/2023)`.
  
:::

::: {.content-hidden when-format="html"}
::: {.column width="60%"}
```{r eval = T, fig.env = "figure",out.height="100%", fig.pos = "H", fig.align = "center", fig.cap="Your script (top left) should look like this"}
#| echo: false

library(magick)
magick::image_read(here::here("media/Rscript_day1.png"))
```
:::
:::

::: {.content-visible when-format="html"}
```{r eval = T, fig.env = "figure",out.width="100%", fig.pos="H", fig.align = "center", fig.cap="Your script (top left) should look like this"}
#| echo: false

library(magick)
magick::image_read(here::here("media/Rscript_day1.png"))
```
:::


# Calculations in R

- we can do calculations in R
- we can add (`+`), subtract (`-`), multiply (`*`) and divide (`/`)

# Calculate in R {.unlisted .unnumbered}

:: callout-tip
### Task

1. try to perform the following calculations in the console:

::: {.column width="50%"}
```{r}
#| output-location: column-fragment
#| code-line-numbers: false
# addition
16+32
```

```{r}
#| output-location: column-fragment
#| code-line-numbers: false
# multiplication
16*32
```
:::

::: {.column width="50%"}
```{r}
#| output-location: column-fragment
#| code-line-numbers: false
# subtraction
16-32
```

```{r}
#| output-location: column-fragment
#| code-line-numbers: false
# division
16/32
```


2. write these calculations into your script and press `Cmd/Ctrl-Enter` to execute them
  + What happens?
:::
:::


## objects

- we can also store values as objects/variables stored in the working environment

```{r}
x <- 16
y <- 32
```

:: callout-note
## Assignment operator

The symbol `<-` is a so-called *assignment operator*. It creates a new object in your working environment or overwrites an existing object with the same name. It is like an arrow that says "take what is on the right and save it as the object name on the left".
:::

## Calculating with functions

- there are also built-in functions for more complex calculations
  + e.g., `mean()` (DE: average), `sum()` (DE: sum)
- what happens if we execute the following?

```{r}
#| output-location: column-fragment
sum(6,10)
```

```{r}
#| output-location: column-fragment
6+10
```

```{r}
#| output-location: column-fragment
mean(6,10)
```

```{r}
#| output-location: column-fragment
(6+10)/2
```

## Calculate with functions {.unlisted .unnumbered}

- the function `mean()` takes only one argument; everything else is ignored
  + the comma in `6,10` lists 2 arguments, so everything after the comma is ignored
- if we want to include more than one object in an argument, we must use the "concatenate" function `c()`
  + "concatenate" means to join or combine

```{r}
#| output-location: column-fragment
mean(c(6,10))
```

## computing with functions {.unlisted .unnumbered}

- You can also use named objects (i.e., those in your working environment) that have a numeric value

:: callout-tip
## Task

1. try to execute the function `mean()` with your stored variables (`x` and `y`) as "chained" arguments
2. do the same with the function `sum()`. What happens if you do not use `c()`?
:::

# final result

- Save your R script (`File > Save`, or `Cmd/Ctrl-S`)

- You should now have a *RProject folder* for this course, containing the following:
  + `course_name.RProj`
  + a folder named `data`
  + a folder named `notes`, which contains
      + a folder named `01-rstudio` that contains the following
        + a `.R` file containing today's work
- You now know how to
  + perform *simple calculations* in R
  + save *objects* in your working environment
  + perform simple mathematical calculations with your saved objects

# Session Info

- Um die Reproduzierbarkeit zu verbessern, ist es nützlich, die Version von R, RStudio und die verwendeten Pakete zu verfolgen
  + Zu diesem Zweck können Sie die folgenden Befehle ausführen:

```{r}
# R version
R.version.string
# R version name
R.version$nickname
```

```{r}
#| eval: false
# RStudio version
RStudio.Version()$version
# RStudio version name
RStudio.Version()$release_name
```

```{r}
#| eval: false
# alle Paketeversionen
sessionInfo()
```


```{r}
#| eval: false
#| echo: false
# N.B., RStudio.Version can also be called using
rstudioapi::versionInfo()
# but neither will run during a knit/render; so manually run and update inline text
```


## Session Info {-}

```{r}
#| eval: false
#| echo: false
# RStudio version
RStudio.Version()$version
# RStudio version name
RStudio.Version()$release_name
```


Made with `r R.version.string` (`r R.version$nickname`) and RStudio Version 2023.3.0.386 (Cherry Blossom).

```{r}
sessionInfo()
```

# References {.unlisted .unnumbered visibility="uncounted"}

::: {#refs custom-style="Bibliography"}
:::
